package phonebook;
import java.util.*;
import java.util.Map.Entry;

public class PhoneBook {
	private Map<String,LinkedList<String>> phoneBook;
	int size;
	
	public PhoneBook() {
		phoneBook = new HashMap<String,LinkedList<String>>();
	}
	
	
	/** 
	 * Associates the specified number with the specified 
	 * name in this phone book. 
	 * post: If the specified name is not present in this phone book,
	 *        the specified name is added and associated  with
	 *  	  the specified number. Otherwise the specified 
	 *  	  number is added to the set of number associated with name.
	 * @param name The name for which a phone number is to be added
	 * @param number The number associated with the specified name
	 * @return true if the specified name and number was inserted
	 */
	public boolean put(String name, String number) {
		if (name == null || number == null)
			return false;
		
		if (!phoneBook.containsKey(name)) {
			phoneBook.put(name, new LinkedList<String>(Arrays.asList(number)));
			return true;
		} else if (phoneBook.get(name).contains(number)) { 
			return false;
		} else {
			return phoneBook.get(name).add(number);
		}
	}
	
	
	/**
	 * Removes the the specified name from this phone book.
	 * post: If the specified name is present in this phone book,
	 * 		 it is removed. Otherwise this phone book is
	 * 		 unchanged.
	 * @param name The name to be removed
	 * @return true if the specified name was present
	 */
	public boolean remove(String name) {
		if (phoneBook.containsKey(name)) {
			phoneBook.remove(name);
			return true;
		} else {
			return false;
		}
	}
	
	/**
	 * Retrieves a list of phone numbers for the specified name. If the 
	 * specified name is not present in this phone book an empty list is 
	 * returned.
	 * @param name The name whose associated phone numbers are to be returned  
	 * @return The phone numbers associated with the specified name
	 */
	public List<String> findNumber(String name) {
		if (phoneBook.containsKey(name))
			return phoneBook.get(name);
		else
			return new LinkedList<String>();
	}
	
	/**
	 * Retrieves a list of names associated with the specified phone number. 
	 * If the specified number is not present in this phone book an empty 
	 * list is returned.
	 * @param number The number for which the set of associated
	 * names is to be returned.
	 * @return The list of names associated with the specified number
	 */
	public List<String> findNames(String number) {
		LinkedList<String> names = new LinkedList<String>();
		
		
		
//		Iterator<Entry<String,LinkedList<String>>> iter = phoneBook.entrySet().iterator();
		
//		while (iter.hasNext()) {
//		}
		
		for (Entry<String,LinkedList<String>> entry : phoneBook.entrySet()) {
			if (entry.getValue().contains(number))
				names.add(entry.getKey());
		}
		
		return names;
	}
	
	/**
	 * Retrieves the set of all names present in this phone book.
	 * The set's iterator will return the names in ascending order
	 * @return The set of all names present in this phone book
	 */
	public Set<String> names() {
		Set<String> ret = new HashSet<String>();
		
		for (String str : phoneBook.keySet())
			ret.add(str);
		
		return ret;
	}
	
	/**
	 * Retrieves the set of all numbers present in this phone book.
	 * The set's iterator will return the numbers in ascending order
	 * @return The set of all numbers present in this phone book
	 */
	public Set<String> numbers() {
		Set<String> ret = new HashSet<String>();
		
		for (LinkedList<String> list : phoneBook.values())
			for (String str : list)
				ret.add(str);
		
		return ret;
	}
	
	/**
	 * Returns true if this phone book is empty
	 * @return true if this phone book is empty
	 */	
	public boolean isEmpty() {
		return true;
	}
	
	/**
	 * Returns the number of names in this phone book
	 * @return The number of names in this phone book
	 */
	public int size() {
		return 
	}

}
