package map;

import java.util.Arrays;

public class SimpleHashMap<K, V> implements Map<K, V> {
	private int size;
	private int capacity;
	private float loadFactor;
	Entry<K,V>[] table;
	
	@SuppressWarnings("unchecked")
	public SimpleHashMap() {
		size = 0;
		capacity = 16;
		loadFactor = 0.75f;
		table = (Entry<K,V>[]) new Entry[capacity];
	}
	
	@SuppressWarnings("unchecked")
	public SimpleHashMap(int capacity) {
		size = 0;
		this.capacity = capacity;
		loadFactor = 0.75f;
		table = (Entry<K,V>[]) new Entry[this.capacity];
	}
	
	@SuppressWarnings("unchecked")
	public static void main(String[] args) {
		SimpleHashMap shm = new SimpleHashMap();
		
		shm.put("Siffra", 1);
		shm.put("Siffra", 10);
		shm.put(213, 1232);
		shm.put("Hej", 12312);
		shm.put(1, 213);
		shm.put(1, 123);
		
		System.out.println(213 % 4);
		
		System.out.println(shm.show());
	}

	public V get(Object key) {
		@SuppressWarnings("unchecked")
		Entry<K,V> item = find(index((K) key), (K) key);
		
		if (item != null)
			return item.value;
		// Om item är null borde inte item.value också vara null?
		// return item.value;
		return null;
	}

	public boolean isEmpty() {
		return (size == 0);
	}

	/*
	 * 1. Platsen i vektorn tom och då lägger du bara till den. 
	 * 2. Platsen i vektorn är inte tom och du får lägga till den först/sist på kedjan. 
	 * 3. Key finns redan i Hash-tabellen och då ska du skriva över den och returnera det gamla värdet. i
	 * 
	 * Medans detta sker skall loadFactor ej överstiga 0.75, då måste vektorn expanderas.:W
	 * 
	 */
	public V put(K key, V value) {
		if ((float) size / capacity > loadFactor)
			rehash();
		
		int index = index(key);
		
		Entry<K,V> item = find(index(key), key);
		
		if(item != null)
			return item.setValue(value);
		
		item = new Entry<K,V>(key, value);
		
		if (table[index] != null)
			item.next = table[index];
			//table[index].next = item;
		//else
			//table[index] = item;
		
		table[index] = item;
		size++;
		
		return null;
	}

	public V remove(Object key) {
		@SuppressWarnings("unchecked")
		Entry<K,V> item = table[index((K) key)];
		
		if (item != null) {
			if (item.getKey().equals(key)) {
				table[index((K) key)] = item.next;
				size--;
				return item.getValue();
			} else {
				while (item.next != null) {
					if (item.next.getKey().equals(key)) {
						Entry<K,V> oldItem = item.next;
						item.next = item.next.next;
						return oldItem.getValue();
					}
					item = item.next;
				}
			}
		}
		
		return null;
	}

	public int size() {
		return size;
	}
	
	public String show() {
		StringBuilder sb = new StringBuilder();
		
		for (int index = 0; index < table.length; index++) {
			Entry<K,V> item = table[index];
			while (item != null) {
				sb.append(index + "\t" + item.toString() + "\n");
				item = item.next;
			}
		}
		
		return sb.toString();
	}
	
	@SuppressWarnings("unchecked")
	private void rehash() {
		capacity = capacity * 2;
		
		Entry<K,V>[] oldTable = table;
		
		table = (Entry<K,V>[]) new Entry[capacity];
		
		size = 0;
		
		for (Entry<K,V> e : oldTable) {
			while (e != null) {
				put(e.getKey(), e.getValue());
				e = e.next;
			}
		}
	}
	
	private int index(K key) {
		int index = key.hashCode() % table.length;
		
		if (index < 0)
			index = index + table.length;
		
		return index;
	}
	
	/* Deprecated Method
	private int index(K key) {
		int index = 0;
		
		for (Entry<K,V> e : table) {
			if (e.key.equals(key)) return index;
			index++;
		}
		
		return -1;
	}
	*/

	private Entry<K,V> find(int index, K key) {
		Entry<K,V> e = table[index];
		
		while (e != null) {
			if (e.getKey().equals(key))
				return e;
			
			e = e.next;
		}
		
		return null;
	}

	/* Deprecated Method
	private Entry<K,V> find(int index, K key) {
		for (Entry<K,V> e : table) {
			if (e.key.equals(key) && index(e.key) == index)
				return e;
			if (e.equals(null))
				return null;
		}
		
		return null;
	}
	*/
	
	private static class Entry<K,V> implements Map.Entry<K,V> {
		private K key;
		private V value;
		private Entry<K,V> next;
		
		public Entry(K key, V value) {
			this.key = key;
			this.value = value;
		}
		
		public K getKey() {
			return key;
		}
		
		public V getValue() {
			return value;
		}
		
		public V setValue(V newValue) {
			V oldValue = this.value;
			value = newValue;
			return oldValue;
		}
		
		public String toString() {
			return key.toString() + " = " + value.toString();
		}
		
	}
}
