package bst;

public class BinarySearchTree<E extends Comparable<? super E>> {
	BinaryNode<E> root;
    int size;
    int height;
    boolean hasAdded;
    
    public static void main(String[] args) {
    	BinarySearchTree<Integer> bst = new BinarySearchTree<Integer>();
    	
//    	bst.add(6);
    	bst.add(3);
    	bst.add(9);
    	bst.add(11);
    	bst.add(13);
    	bst.add(1);
    	bst.add(7);
    	bst.add(5);
    	
//    	for (int i = 1; i < 11; i++)
//    		bst.add(i);
    	
    	System.out.println("Size: " + bst.size());
    	
    	System.out.println("Height: " + bst.height());
    	
    	bst.printTree();
    	
    	BSTVisualizer bstv = new BSTVisualizer("Test", 400, 400);
    	
    	bstv.drawTree(bst);
    	
    	bst.rebuild();
    	
    	bstv.drawTree(bst);
    	
    	System.out.println("NEW: ");
    	
    	bst.printTree();
    }
    
	/**
	 * Constructs an empty binary searchtree.
	 */
	public BinarySearchTree() {
		
	}

	/**
	 * Inserts the specified element in the tree if no duplicate exists.
	 * @param x element to be inserted
	 * @return true if the the element was inserted
	 */
	public boolean add(E x) {
		root = add(root, x);
		
		return hasAdded;
		
//		int tempSize = this.size();
		
//		add(root, new BinaryNode<E>(x));
		
//		return (tempSize < this.size());
	}
	
	private BinaryNode<E> add(BinaryNode<E> current, E x) {
		if (current == null) {
			hasAdded = true;
			return new BinaryNode<E>(x);
		} else if (x.compareTo(current.element) == 0) {
			hasAdded = false;
			return current;
		} else if (x.compareTo(current.element) < 0) {
			current.left = add(current.left, x);
			return current;
		} else {
			current.right = add(current.right, x);
			return current;
		}
	}
	
/*	private void add(BinaryNode<E> current, BinaryNode<E> newNode) {
		if (current == null) {
			current = newNode;
		} else if (newNode.element.compareTo(current.element) < 0) {
			add(current.left, newNode);
		} else if (newNode.element.compareTo(current.element) > 0) {
			add(current.right, newNode);
		}
	}*/
	
	/**
	 * Computes the height of tree.
	 * @return the height of the tree
	 */
	public int height() {
		return height(root);
	}
	
	/**
	 * height help method?
	 * @param node to count from
	 * @return the farthest node length, the "leaf".
	 */
	private int height(BinaryNode<E> current) {
		if (current == null)
			return -1;
		
		if (height(current.left) > height(current.right))
			return height(current.left) + 1;
		else
			return height(current.right) + 1;
	}
	
	/**
	 * Checks if tree is empty.
	 * @return true if tree is empty.
	 */
	public boolean isEmpty() {
		return (size == 0);
	}
	
	/**
	 * Returns the number of elements in this tree.
	 * @return the number of elements in this tree
	 */
	public int size() {
		return size(root);
	}
	
	/**
	 * Size helper method
	 * @param current = root
	 * @return +1 for the node you've passed and head further down the tree.
	 */
	private int size(BinaryNode<E> current) {
		if (current == null)
			return 0;
		
		return (size(current.left) + size(current.right) + 1);
	}

	/**
	 * Print tree contents in inorder.
	 */
	public void printTree() {
		printInorderTraversal(root, "root");
	}

	private void printInorderTraversal(BinaryNode<E> current, String pos) {
		if (current == null) {
			System.out.print("null\n");
		} else {
			printInorderTraversal(current.left, new String("left"));
			System.out.print(pos + ": " + current.element.toString() + "\n");
			printInorderTraversal(current.right, new String("right"));
		}
	}
	
	/** 
	 * Builds a complete tree from the elements in the tree.
	 */
	public void rebuild() {
		if (root != null) {
			E[] a = (E[]) new Comparable[size()];
			//toArray(root, a, 0);
			
			root = buildTree(a, 0, toArray(root, a, 0));
			
			for (E e : a) {
				if (e != null)
					System.out.println("Array: " + e);
			}
			
			
			//root = buildTree(a, 0, size() - 1);
		} else {
			System.out.println("Empty Tree");
		}
	}
	
	/*
	 * Adds all elements from the tree rooted at n in inorder to the array a
	 * starting at a[index].
	 * Returns the index of the last inserted element + 1 (the first empty
	 * position in a).
	 */
	private int toArray(BinaryNode<E> current, E[] a, int index) {
		/* if (current != null) {
			index = toArray(current.left, a, index);
			a[index] = current.element;
			index = toArray(current.right, a, index + 1);
		} */
		
		if (current.left != null) index = toArray(current.left, a, index);
		a[index] = current.element;
		if (current.right != null) index = toArray(current.right, a, index + 1);
		
		return index;
	}
	
	/*
	 * Builds a complete tree from the elements a[first]..a[last].
	 * Elements in the array a are assumed to be in ascending order.
	 * Returns the root of tree.
	 */
	private BinaryNode<E> buildTree(E[] a, int first, int last) {
		if (first > last)
			return null;

		int mid = (first + last) / 2;
		
		BinaryNode<E> rootNode = new BinaryNode<E>(a[mid]);
		
		rootNode.left = buildTree(a, first, mid - 1);
		rootNode.right = buildTree(a, mid + 1, last);
		
		return rootNode;
	}
	


	static class BinaryNode<E> {
		E element;
		BinaryNode<E> left;
		BinaryNode<E> right;

		private BinaryNode(E element) {
			this.element = element;
		}	
	}
	
}
